@page
@{

}
<!DOCTYPE html>

<html lang="ru">
<head>
    <meta charset="utf-8" />
    <title>NRI</title>
    <link rel="stylesheet" href="css/main.css" />
    <meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=no" />
    @*<script src="https://code.jquery.com/jquery-2.2.4.min.js"></script>*@

    <!-- jQuery -->
    <script src="https://code.jquery.com/jquery-3.3.1.min.js"></script>
    <!-- Bootstrap -->
    @*<script src="/examples/vendors/bootstrap-3.3.7/js/bootstrap.min.js"></script>*@

    @*<script type="text/javascript" src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js"></script>*@

    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/1.5.3/jspdf.debug.js" integrity="sha384-NaWTHo/8YCBYJ59830LTz/P4aQZK1sS0SneOgAvhsIl3zBu8r9RevNg5lHCHAuQ/" crossorigin="anonymous"></script>
    @*<script src="https://unpkg.com/jspdf@latest/dist/jspdf.min.js"></script>*@
    <script src="~/16761-normal.js"></script>
    @*<script src="~/js/treeCreater.js"></script>*@



    <style type="text/css">
        /*table {
            font-family: "Lucida Sans Unicode", "Lucida Grande", Sans-Serif;
            text-align: left;
            border-collapse: separate;
            border-spacing: 3px;
            background: #337ab7;
            background-color: #337ab7;
            border-radius: 0.375em;
            box-shadow: inset 0 0 0 2px #337ab7;
            color: #337ab7 !important;
        }

        tr {
            background: #ffffff;
            border: 3px solid #337ab7;
        }

        th {
            font-size: 18px;
            padding: 10px;
        }

        td {
            background: #ffffff;
            padding: 10px;
        }*/

        #Nomenclature {
            color: #337ab7;
        }

        INPUT {
            margin: 10px 10px 10px 0;
        }

        .table {
        }

        /*.treeline .drop {
            position: absolute;
            left: -6px;
            top: 5px;
            width: 11px;
            height: 11px;
            line-height: 1em;
            text-align: center;
            background: #9F9F9F;
            color: #fff;
            font-size: 78%;
            cursor: pointer;
            -webkit-user-select: none;
            -moz-user-select: none;
        }

        .treeline li:last-child > .drop {
            margin-left: 1px;
        }

        .treeline .drop + ul {
            display: none;
        }

        .treeline .dropM + ul {
            display: block;
        }*/

        /*#explosionModal {
            height: 500px;
            overflow: auto;
            display: block;
        }*/

        .upload-button {
            display: -webkit-inline-box;
        }

        #form {
            margin: 0 0 0 0;
        }


        /* Remove default bullets */
        ul, #myUL {
            list-style-type: none;
        }

        /* Remove margins and padding from the parent ul */
        #myUL {
            margin: 0;
            padding: 0;
        }

        /* Style the caret/arrow */
        .caret {
            cursor: pointer;
            user-select: none; /* Prevent text selection */
            width: 100%;
            height: 100%;
            border-top: none;
        }

            /* Create the caret/arrow with a unicode, and style it */
            .caret::before {
                content: "\25B6";
                color: black;
                display: inline-block;
                margin-right: 6px;
            }

        /* Rotate the caret/arrow icon when clicked on (using JavaScript) */
        .caret-down::before {
            transform: rotate(90deg);
        }

        /* Hide the nested list */
        .nested {
            display: none;
        }

        /* Show the nested list when the user clicks on the caret/arrow (with JavaScript) */
        .active {
            display: block;
        }










        .treeRoot li {
            list-style: none;
            margin: 5px 0 5px 20px;
        }

            .treeRoot li[level='0'] {
                margin-left: 0;
            }

            .treeRoot li:not(.parentNode) {
                padding-left: 15px;
            }

        .triangle {
            width: 0;
            height: 0;
            overflow: hidden;
            font-size: 0; /*是因为, 虽然宽高度为0, 但在IE6下会具有默认的 */
            line-height: 0; /* 字体大小和行高, 导致盒子呈现被撑开的长矩形 */
            border-width: 5px;
            transition: transform .2s;
            transform-origin: left center;
            border-style: solid dashed dashed dashed; /*IE6下, 设置余下三条边的border-style为dashed,即可达到透明的效果*/
            border-color: transparent transparent transparent #000;
        }

        .closed .triangle {
            transform: rotateZ(90deg);
        }

        .treeRoot div.title {
            height: 21px;
            position: relative;
        }

            .treeRoot div.title i {
                position: absolute;
                top: 6px;
                left: 0;
            }

            .treeRoot div.title p {
                position: absolute;
                top: 0;
                left: 15px;
                margin: 0;
            }
    </style>
</head>


<body>
    <INPUT type="button" value="Добавить" data-modal="addModal" />
    <INPUT type="button" value="Редактировать" onclick="openEditModal()" />
    <INPUT type="button" value="Удалить" onclick="openDeleteModal()" />
    <INPUT type="button" value="Спецификация" data-modal="SPModal" />
    <INPUT type="button" value="Разузлование" data-modal="explosionModal" />

    <form id="form" name="form" enctype="multipart/form-data" method="post">
        <div class="buttons">
            <div class="upload-button">
                <INPUT id="files" class="import" name="files" type="file" size="1" value="Импорт" onchange="prepareFile('files')" />
                <INPUT id="import" type="button" value="Импорт" onclick="importXlsx()" style="visibility:hidden;" />
            </div>
        </div>
    </form>

    <div class="table">
        <table id="nomenclatureTable">
            <thead>
                <tr>
                    <th>Код</th>
                    <th>Номенклатура</th>
                    <th>Тип получения</th>
                    <th>Тип номенклатуры</th>
                    <th>Номенклатура родительского изделия</th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>

    <div id="overlay" class="overlay fadeOut" data-close=""></div>
    <div class="modal-outer" style="top: -460px;">
        <span class="closer" id="closer" data-close=""></span>
        <div id="addModal">
            <form name="nomenclatureForm">
                <input type="hidden" name="id" value="0" />

                <div class="form-group">
                    <label for="code">Код:</label>
                    <input class="form-control" name="code" id="code" />
                </div>
                <div class="form-group">
                    <label for="nomenclature">Номенклатура:</label>
                    <input class="form-control" name="nomenclature" id="nomenclature" />
                </div>
                <div class="form-group">
                    <label for="selectReceiptType">Тип получения:</label>
                    <select name="selectReceiptType" id="selectReceiptType"></select>
                </div>
                <div class="form-group">
                    <label for="selectNomenclatureType">Тип номенклатуры:</label>
                    <select name="selectNomenclatureType" id="selectNomenclatureType"></select>
                </div>
                <div class="form-group">
                    <label for="selectParentNomenclature">Номенклатура родительского изделия:</label>
                    <select name="selectParentNomenclature" id="selectParentNomenclature"></select>
                </div>
                <div class="panel-body">

                    <input type="button" value="Добавить" onclick="AddNomenclature()" />
                    <input type="button" value="Сбросить" onclick="reset('nomenclatureForm')" />
                </div>
            </form>
        </div>

        <div id="SPModal">
            <form name="SPForm">
                <input type="hidden" name="id" value="0" />
                <div class="form-group">
                    <label for="selectSPNomenclature">Номенклатура:</label>
                    <select name="selectSPNomenclature" id="selectSPNomenclature"></select>

                </div>
                <div class="panel-body">
                    <INPUT type="button" value="Показать" onclick="showSP()" />
                    <INPUT type="button" value="Выгрузить в pdf" onclick="downloadSP()" />
                </div>
                <div id="listNomenclaturesSP" style="padding: 15px;"></div>
            </form>
        </div>

        <div id="explosionModal">
            <form name="explosionForm">
                <input type="hidden" name="id" value="0" />
                <div class="form-group">
                    <label for="selectExplosion">Номенклатура:</label>
                    <select name="selectExplosion" id="selectExplosion"></select>

                </div>
                <div class="panel-body">
                    <INPUT type="button" value="Показать" onclick="showExplosion()" />
                    @*<INPUT type="button" value="Выгрузить в pdf" onclick="downloadSP()" />*@
                </div>
                <div id="listExplosion" style="padding: 15px;">
                    <ul id ="treeRoot" class="treeRoot"></ul>


                        @*<ul class="treeline" id="tree">*@
                        @*<li>Главное меню
                <ul>
                    <li>
                        <div class="drop">+</div>База знаний
                        <ul>
                            <li>Компоненты</li>
                            <li>Плагины</li>
                            <li>Модули</li>
                        </ul>
                    </li>
                    <li>Отзывы</li>
                    <li>Контакты</li>
                </ul>
            </li>*@
                        @*</ul>*@
                </div>
            </form>
        </div>

        <div id="editModal">
            <form name="nomenclatureEditForm">
                <input type="hidden" name="id" value="0" />
                <div class="form-group">
                    <label for="codeEdit">Код:</label>
                    <input class="form-control" name="codeEdit" id="codeEdit" />
                </div>
                <div class="form-group">
                    <label for="nomenclatureEdit">Номенклатура:</label>
                    <input class="form-control" name="nomenclatureEdit" id="nomenclatureEdit" />
                </div>
                <div class="form-group">
                    <label for="selectReceiptTypeEdit">Тип получения:</label>
                    <select name="selectReceiptTypeEdit" id="selectReceiptTypeEdit"></select>
                </div>
                <div class="form-group">
                    <label for="selectNomenclatureTypeEdit">Тип номенклатуры:</label>
                    <select name="selectNomenclatureTypeEdit" id="selectNomenclatureTypeEdit"></select>
                </div>
                <div class="form-group">
                    <label for="selectParentNomenclatureEdit">Номенклатура родительского изделия:</label>
                    <select name="selectParentNomenclatureEdit" id="selectParentNomenclatureEdit"></select>
                </div>
                <div class="panel-body">

                    <input type="button" value="Изменить" onclick="EditNomenclature()" />
                    @*NOMDO*@
                    <input type="button" value="Сбросить" onclick="reset('nomenclatureEditForm')" />
                </div>
            </form>
        </div>


        <div id="deleteModal">
            <div class="panel-body">
                <h3>Вы уверены, что хотите удалить запись?</h3>
                <input type="button" value="Удалить" onclick="DeleteNomenclature()" />
                <input type="button" value="Отменить" onclick="CloseModal()" />
            </div>
        </div>
    </div>


    @*<script type="text/javascript">
            //$(function () {
            //    var ul = document.querySelectorAll('.treeline > li:not(:only-child) ul, .treeline ul ul');
            //    for (var i = 0; i < ul.length; i++) {
            //        var div = document.createElement('div');
            //        div.className = 'drop';
            //        div.innerHTML = '+';
            //        ul[i].parentNode.insertBefore(div, ul[i].previousSibling);
            //        div.onclick = function () {
            //            this.innerHTML = (this.innerHTML == '+' ? '−' : '+');
            //            this.className = (this.className == 'drop' ? 'drop dropM' : 'drop');
            //        }
            //    }
            //})();
        </script>*@


   

    <script>
        var formData;

        function prepareFile(inputId) {
            var input = document.getElementById(inputId);
            var files = input.files;
            formData = new FormData();

            for (var i = 0; i != files.length; i++) {
                formData.append("files", files[i]);
            }

            var importButton = document.getElementById("import");
            importButton.style = "visibility:visible;";
        }


        function importXlsx() {
            var _url = '@Url.Action("Import", "Nomenclature")';

            $.ajax(
                {
                    url: _url,
                    data: formData,
                    processData: false,
                    contentType: false,
                    type: "POST",
                    success: async function (nomenclature) {
                        //console.log(techProcess);

                        var table = document.getElementById('nomenclatureTable');

                        for (var i = 1; i < table.rows.length;) {
                            table.deleteRow(i);
                        }
                        await GetNomenclatures();
                        alert('Запись успешно добавлена');
                        var importButton = document.getElementById("import");
                        importButton.style = "visibility:hidden;";
                    },
                    error: function (e) {
                        console.log(e.message);
                    }
                });

        }
    </script>


    <script>
        
        //activateToggler();
        function activateToggler() {
            var toggler = document.getElementsByClassName("caret");
            var x;

            for (x = 0; x < toggler.length; x++) {
                toggler[x].addEventListener("click", function () {
                    this.parentElement.querySelector(".nested").classList.toggle("active");
                    this.classList.toggle("caret-down");
                });
            }
            

        }


        var selectedCheckbox;
        var selectedForDelete = [];
        var SPNomenclatures = [];
        var ExplosionNomenclatures = [];
        var resultForDelete = new Map();
        var resultNOMForSP = new Map();
        var resultPRNTForSP = new Map();

        var explosionMap = new Map();

        function downloadSP() {
            showSP();

            var indexNomenclatureSelected = document.getElementById("selectSPNomenclature").options.selectedIndex;
            var nomenclature = document.getElementById("selectSPNomenclature").options[indexNomenclatureSelected].text;

            var doc = new jsPDF()


            doc.setFont('16761')

            doc.text("Номенклатура родительского изделия: ", 10, 20);
            doc.text(nomenclature, 10, 30);

            var x = 30;

            for (var i = 0; i < SPNomenclatures.length; i++) {
                x = x + 10;
                doc.text("Номенклатура: " + SPNomenclatures[i], 40, x);
            }


            doc.save('specification.pdf')
        }

        function showSP() {

            var indexNomenclatureSelected = document.getElementById("selectSPNomenclature").options.selectedIndex;
            var nomenclatureId = document.getElementById("selectSPNomenclature").options[indexNomenclatureSelected].value;

            var f = document.getElementById('listNomenclaturesSP');

            $("label.spLabel").remove();
            SPNomenclatures = [];

            resultPRNTForSP.forEach(function (keyPRNT, valuePRNT) {
                var parentIdSP = resultPRNTForSP.get(valuePRNT);

                resultNOMForSP.forEach(function (keyNOM, valueNOM) {
                    var nomenclatureName = keyNOM;

                    if (valuePRNT == valueNOM && nomenclatureId == parentIdSP) {
                        SPNomenclatures.push(nomenclatureName);
                    }
                });

            });

            for (var i = 0; i < SPNomenclatures.length; i++) {
                var elem = SPNomenclatures[i];
                var sp = document.createElement("span");
                sp.innerHTML = '<label for="listNomenclaturesSP" class="spLabel" id="' + i + '">' + elem + '</label>';
                sp.id = i;
                f.appendChild(sp);
            }
        }

        //<ul class="treeline">
        //    <li>Главное меню
        //        <ul>
        //            <li>
        //                <div class="drop">+</div>База знаний /* Блок раскрытия списка */
        //                <ul>
        //                    <li>Компоненты</li>
        //                    <li>Плагины</li>
        //                    <li>Модули</li>
        //                </ul>
        //            </li>
        //            <li>Отзывы</li>
        //            <li>Контакты</li>
        //        </ul>
        //    </li>
        //</ul>


        function getNestedChildren(arr, parent) {
            var out = []
            for (var i in arr) {
                if (arr[i].parent == parent) {
                    var children = getNestedChildren(arr, arr[i].id)

                    if (children.length) {
                        arr[i].children = children
                    }
                    out.push(arr[i])
                }
            }
            return out
        }


        function treeCreater(treeArr, className) {
            var $ = treeArr,
                root = document.createDocumentFragment(),
                childLevel = 0
            function insertChildren(parentNode, traverseArr) {
                for (let i = 0; i < traverseArr.length; i++) {
                    if (parentNode === root) {
                        childLevel = 0
                    }
                    var currentLi = document.createElement('li')
                    currentLi.setAttribute('level', childLevel)
                    if (traverseArr[i].children && traverseArr[i].children.length > 0) {
                        var title = document.createElement('div')
                        var triangle = document.createElement('i')
                        var text = document.createElement('p')
                        currentLi.classList.add('parentNode')
                        title.classList.add('title')
                        triangle.classList.add('triangle')
                        text.innerText = traverseArr[i].title
                        title.appendChild(triangle)
                        title.appendChild(text)
                        currentLi.appendChild(title)
                        childLevel++
                        insertChildren(currentLi, traverseArr[i].children)
                    } else {
                        currentLi.innerText = traverseArr[i].title
                    }
                    parentNode.appendChild(currentLi)
                }
            }
            insertChildren(root, $)
            document.querySelector('ul.' + className + '').appendChild(root)
        }


        async function showExplosion() {
            //var el = document.getElementById("treeRoot");
            //el.innerHTML = '';
            //activateToggler();
            //; (function () {
            //    var ul = document.querySelectorAll('.treeline > li:not(:only-child) ul, .treeline ul ul');
            //    for (var i = 0; i < ul.length; i++) {
            //        var div = document.createElement('div');
            //        div.className = 'drop';
            //        div.innerHTML = '+';
            //        ul[i].parentNode.insertBefore(div, ul[i].previousSibling);
            //        div.onclick = function () {
            //            this.innerHTML = (this.innerHTML == '+' ? '−' : '+');
            //            this.className = (this.className == 'drop' ? 'drop dropM' : 'drop');
            //        }
            //    }
            //})();

            var indexNomenclatureSelected = document.getElementById("selectExplosion").options.selectedIndex;
            var nomenclatureId = document.getElementById("selectExplosion").options[indexNomenclatureSelected].value;
            var nomenclatureText = document.getElementById("selectExplosion").options[indexNomenclatureSelected].text;

            //document.getElementById("listExplosion").innerText = nomenclatureText;

            //var f = document.getElementById('listExplosion');

            //$("label.ExplosionLabel").remove();


            await GetExplosion(nomenclatureId);


            var list = new Array();
            j = 0;
            explosionMap.forEach(function (value, key) {
                list[j] = new Object({ id: value[0], title: value[1], parent: value[2]});
                //var arr = [];
                //arr.push(value[0]);
                //arr.push(value[1]);
                //arr.push(value[2]);
                //arr.push(value[3]);
                //list.push(arr);
                j++;
            })

            var result = getNestedChildren(list, nomenclatureId);


            //var root = document.getElementById("myUL");

            treeCreater(result, 'treeRoot')
            document.getElementById("selectExplosion").options[indexNomenclatureSelected].selected = true;

            //var stringHTML;

            //stringHTML = '<div class="drop">+</div><li id="' + nomenclatureId + '">' + nomenclatureText;

            //var max = 2;
            //var k;
            //explosionMap.forEach(function (key, value) {
            //    for (var i = 1; i <= max; i++) {
            //        stringHTML += '<ul><li>' + value;
            //        if (key == i && key > 1) {
            //            stringHTML += '<div class="drop">+</div>' + value;
            //            k = i;
            //            for (k; k < max; k++) {
            //                if (value > k + 1) { stringHTML += '<ul><li>' + value + '</li>'; }
            //            }
            //        }
            //        stringHTML += '</ul>';

            //    }
            //});
            //root.innerHTML = stringHTML;



            /*var parentId = nomenclatureId;
            var string = '<li><span class="caret" onclick="activateToggler();">' + nomenclatureText + '</span> <ul class="nested">';
            var values = explosionMap.values();
            var nexts = explosionMap.values();
            var keys = nexts.next().value;

            var lvl = 1;
            for (var i = 0; i < explosionMap.size; i++) {

                var array = values.next().value;
                var next = nexts.next().value;
                
                if (array != null) {
                    var id = array[0];
                    if (parentId == array[2]) {
                        if (next != null && array[3] == lvl && next[3] == lvl + 1)
                            string += '<li><span class="caret" onclick="activateToggler();">' + array[1] + '</span><ul class="nested">';
                        else {
                            string += '<li>' + array[1] + '</li>';
                        }
                    }
                    if (next != null) {
                        parentId = next[2];
                    }
                    lvl++;
                }
            }
            for (var i = 0; i < explosionMap.size; i++) {
                string += '</ul></li>';
            }
            string += '</ul>';*/





            //explosionMap.forEach(function (key, value) {
                
            //    for (var i = 0; i < value.length - 1; i++) {
            //        var lvl = 1;
            //        if (parentId == value[i][1]) {
            //            if (value[i][2] == lvl && value[i + 1][2] == lvl + 1)
            //                string += '<li><span class="caret">' + value[i][0] + '</span><ul class="nested">';
            //            else {
            //                string += '<li>' + value[i][0] + '</li>';
            //            }
            //        }
            //        parentId = value[i][1];
            //        lvl++;
            //    }
            //});




            //root.innerHTML = string;

        }


        function EditNomenclature() {

            var nomenclatureNamePUT = document.getElementById("nomenclatureEdit").value;
            var codePUT = document.getElementById("codeEdit").value;

            var indexReceiptTypeSelected = document.getElementById("selectReceiptTypeEdit").options.selectedIndex;
            var receiptTypeIdPUT = document.getElementById("selectReceiptTypeEdit").options[indexReceiptTypeSelected].value;

            var indexNomenclatureTypeSelected = document.getElementById("selectNomenclatureTypeEdit").options.selectedIndex;
            var nomenclatureTypeIdPUT = document.getElementById("selectNomenclatureTypeEdit").options[indexNomenclatureTypeSelected].value;

            var indexParentNomenclatureSelected = document.getElementById("selectParentNomenclatureEdit").options.selectedIndex;
            var parentNomenclatureIdPUT = document.getElementById("selectParentNomenclatureEdit").options[indexParentNomenclatureSelected].value;
            if (parentNomenclatureIdPUT == 0) {
                parentNomenclatureIdPUT = null;
            }

            var idPUT = selectedCheckbox;

            var urlstr = "api/Nomenclature/" + idPUT;
            $.ajax({
                url: urlstr,
                contentType: "application/json",
                method: "PUT",
                data: JSON.stringify({
                    code: codePUT,
                    name: nomenclatureNamePUT,
                    parentNomenclatureId: parentNomenclatureIdPUT,
                    receiptTypeId: receiptTypeIdPUT,
                    nomenclatureTypeId: nomenclatureTypeIdPUT,
                    id: idPUT
                }),
                success: async function (nomenclature) {
                    reset('nomenclatureEditForm');
                    alert('Запись успешно изменена');
                    //update table

                    var table = document.getElementById('nomenclatureTable');

                    for (var i = 1; i < table.rows.length;) {
                        table.deleteRow(i);
                    }
                    await GetNomenclatures();
                    await GetListNomenclatures();
                    CloseModal();
                    await GetParentNomenclature();
                },
                error: function (e) {
                    console.log(e.message);
                }
            })

        }

        function openEditModal() {

            $('input[type=checkbox]').each(async function () {
                //if ($(this).is(':checked')) {
                if (this.checked) {
                    selectedCheckbox = this.value;
                    var editModal = document.getElementById('editModal');

                    somebodyShow(editModal);
                    //NOMDO SHOW EDIT MODAL


                    //editButton.setAttribute('data-modal', 'editModal');
                    //showForEdit(editModal);
                    //modalShow(editModal);
                    //$("#editModal").show();
                    var id = selectedCheckbox;
                    await GetNomenclatureById(id);

                    return false;
                }
            });
            if (selectedCheckbox == null) {
                alert('Не выбрана ни одна запись');
            }
            return false;
        }

        // сброс формы
        function reset(formId) {
            var form = document.forms[formId];
            form.reset();
            form.elements["id"].value = 0;
        }


        function CloseModal() {
            var closer = document.getElementById('closer');
            closer.click();
        }


        function openDeleteModal() {
            selectedForDelete = [];

            $('input[type=checkbox]').each(function () {
                if (this.checked) {
                    selectedForDelete.push(this.value)
                }
            });


            if (selectedForDelete.length == 0) {
                alert('Не выбрана ни одна запись');
                return false;
            }


            var deleteModal = document.getElementById('deleteModal');
            //NOMDO SHOW DELETE MODAL
            somebodyShow(deleteModal);

            return false;
        }

        async function DeleteNomenclature() {
            selectedForDelete.forEach(async function (elem) {
                await GetNomenclatureById(elem);
                var idDEL = elem;
                var nomenclatureNameDEL = resultForDelete.get('nomenclatureName');
                var codeDEL = resultForDelete.get('code');
                var parentNomenclatureIdDEL = resultForDelete.get('parentNomenclatureId');
                var receiptTypeIdDEL = resultForDelete.get('receiptTypeId');
                var nomenclatureTypeIdDEL = resultForDelete.get('nomenclatureTypeId');

                var urlstr = "api/Nomenclature/" + idDEL;
                $.ajax({
                    url: urlstr,
                    contentType: "application/json",
                    method: "DELETE",
                    data: JSON.stringify({
                        code: codeDEL,
                        name: nomenclatureNameDEL,
                        parentNomenclatureId: parentNomenclatureIdDEL,
                        receiptTypeId: receiptTypeIdDEL,
                        nomenclatureTypeId: nomenclatureTypeIdDEL,
                        id: idDEL
                    }),
                    success: async function (nomenclature) {
                        alert('Запись удалена');

                        var table = document.getElementById('nomenclatureTable');

                        for (var i = 1; i < table.rows.length;) {
                            table.deleteRow(i);
                        }
                        await GetNomenclatures();
                        await GetListNomenclatures();
                        CloseModal();
                        await GetParentNomenclature();
                    },
                    error: function (e) {
                        console.log(e.message);
                    }
                });
            })
            //alert('Запись удалена');
            //CloseModal();
            //if (res) {
            //    alert('Запись удалена');

            //    var table = document.getElementById('nomenclatureTable');

            //    for (var i = 1; i < table.rows.length;) {
            //        table.deleteRow(i);
            //    }
            //    await GetNomenclatures();
            //    CloseModal();
            //}



        }

        async function GetExplosion(id) {
            explosionMap.clear();


            var level = 1;

            var parent = await GetNomId(id);
            var noms = await GetListNomenclatures();

            

            var parentArray = new Array(parent.id, parent.name, parent.parentNomenclatureId, 0);
            explosionMap.set(parent.id, parentArray);

            for (var y = 0; y < noms.length; y++) {
                while (parent.id == noms[y].parentNomenclatureId) {
                    for (var i = 0; i < noms.length; i++) {
                        var explosionArray = [];
                        if (noms[i].parentNomenclatureId == parent.id) {
                            //explosionMap.set(noms[i].name, level);
                            explosionArray.push(noms[i].id);
                            explosionArray.push(noms[i].name);
                            explosionArray.push(noms[i].parentNomenclatureId);
                            explosionArray.push(level);
                            explosionMap.set(noms[i].id, explosionArray);
                        }
                        
                    }

                    parent = await GetNomId(noms[y].id);
                    level = level + 1;

                }
            }
            return explosionMap;
        }
        var nomById;
        async function GetNomId(id) {
            var urlstr = "api/Nomenclature/" + id;
            await $.ajax({
                url: urlstr,
                type: 'GET',
                contentType: "application/json",
                success: async function (nomenclature) {
                    nomById = nomenclature;
                },
                error: function (e) {
                    console.log(e.message);
                }
            });
            return nomById;
        }


        async function GetNomenclatureById(id) {
            var urlstr = "api/Nomenclature/" + id;
            await $.ajax({
                url: urlstr,
                type: 'GET',
                contentType: "application/json",
                success: async function (nomenclature) {
                    var previousNOM = document.getElementById('nomenclatureEdit');
                    previousNOM.value = nomenclature.name;

                    var previouscode = document.getElementById('codeEdit');
                    previouscode.value = nomenclature.code;

                    var previousParentNomenclature = document.getElementById('selectParentNomenclatureEdit');
                    previousParentNomenclature.value = nomenclature.parentNomenclatureId;

                    var previousReceiptType = document.getElementById('receiptTypeEdit');
                    previousReceiptType.value = nomenclature.receiptTypeId;

                    var previousNomenclatureType = document.getElementById('nomenclatureTypeEdit');
                    previousNomenclatureType.value = nomenclature.nomenclatureTypeId;

                    resultForDelete.set('nomenclatureName', nomenclature.name);
                    resultForDelete.set('code', nomenclature.code);
                    resultForDelete.set('parentNomenclatureId', nomenclature.parentNomenclatureId);
                    resultForDelete.set('receiptTypeId', nomenclature.receiptTypeId);
                    resultForDelete.set('nomenclatureTypeId', nomenclature.nomenclatureTypeId);
                },
                error: function (e) {
                    console.log(e.message);
                }
            });
        }

        function GetParentNomenclature() {
            var select = document.getElementById('selectParentNomenclature');
            var selectEdit = document.getElementById('selectParentNomenclatureEdit');

            var optsSelect = select.options;
            while (optsSelect.length > 0) {
                optsSelect[optsSelect.length - 1] = null;
            }

            var optsSelectEdit = selectEdit.options;
            while (optsSelectEdit.length > 0) {
                optsSelectEdit[optsSelectEdit.length - 1] = null;
            }

            var ooptionNull = document.createElement('option');
            ooptionNull.value = 0;
            ooptionNull.innerText = '-';
            select.appendChild(ooptionNull);

            var ooptionEditNull = document.createElement('option');
            ooptionEditNull.value = 0;
            ooptionEditNull.innerText = '-';
            selectEdit.appendChild(ooptionEditNull);


            $.ajax({
                url: '/api/Nomenclature',
                type: 'GET',
                contentType: "application/json",
                success: function (nomenclatures) {
                    $.each(nomenclatures, function (index, nomenclature) {
                        var ooption = document.createElement('option');
                        ooption.value = nomenclature.id;
                        ooption.innerText = nomenclature.name
                        select.appendChild(ooption);

                        var ooptionEdit = document.createElement('option');
                        ooptionEdit.value = nomenclature.id;
                        ooptionEdit.innerText = nomenclature.name
                        selectEdit.appendChild(ooptionEdit);
                    })
                },
                error: function (e) {
                    console.log(e.message);
                }
            });
        }

        function GetReceiptType() {
            var select = document.getElementById('selectReceiptType');
            var selectEdit = document.getElementById('selectReceiptTypeEdit');
            $.ajax({
                url: '/api/ReceiptType',
                type: 'GET',
                contentType: "application/json",
                success: function (receiptTypes) {
                    $.each(receiptTypes, function (index, receiptType) {
                        var ooption = document.createElement('option');
                        ooption.value = receiptType.id;
                        ooption.innerText = receiptType.name
                        select.appendChild(ooption);

                        var ooptionEdit = document.createElement('option');
                        ooptionEdit.value = receiptType.id;
                        ooptionEdit.innerText = receiptType.name
                        selectEdit.appendChild(ooptionEdit);
                    })
                },
                error: function (e) {
                    console.log(e.message);
                }
            });
        }

        function GetNomenclatureType() {
            var select = document.getElementById('selectNomenclatureType');
            var selectEdit = document.getElementById('selectNomenclatureTypeEdit');

            $.ajax({
                url: '/api/NomenclatureType',
                type: 'GET',
                contentType: "application/json",
                success: function (nomenclatureTypes) {
                    $.each(nomenclatureTypes, function (index, nomenclatureType) {
                        var ooption = document.createElement('option');
                        ooption.value = nomenclatureType.id;
                        ooption.innerText = nomenclatureType.name
                        select.appendChild(ooption);

                        var ooptionEdit = document.createElement('option');
                        ooptionEdit.value = nomenclatureType.id;
                        ooptionEdit.innerText = nomenclatureType.name
                        selectEdit.appendChild(ooptionEdit);
                    })
                },
                error: function (e) {
                    console.log(e.message);
                }
            });
        }



        async function AddNomenclature() {
            var nomenclatureName = document.getElementById("nomenclature").value;
            var code = document.getElementById("code").value;

            var indexReceiptTypeSelected = document.getElementById("selectReceiptType").options.selectedIndex;
            var receiptTypeId = document.getElementById("selectReceiptType").options[indexReceiptTypeSelected].value;

            var indexNomenclatureTypeSelected = document.getElementById("selectNomenclatureType").options.selectedIndex;
            var nomenclatureTypeId = document.getElementById("selectNomenclatureType").options[indexNomenclatureTypeSelected].value;

            var indexParentNomenclatureSelected = document.getElementById("selectParentNomenclature").options.selectedIndex;
            var parentNomenclatureId = document.getElementById("selectParentNomenclature").options[indexParentNomenclatureSelected].value;
            if (parentNomenclatureId == 0) {
                parentNomenclatureId = null;
            }


            $.ajax({
                url: "api/Nomenclature",
                contentType: "application/json",
                method: "POST",
                data: JSON.stringify({
                    code: code,
                    name: nomenclatureName,
                    parentNomenclatureId: parentNomenclatureId,
                    nomenclatureTypeId: nomenclatureTypeId,
                    receiptTypeId: receiptTypeId
                }),
                success: async function (nomenclature) {
                    reset('nomenclatureForm');
                    alert('Запись успешно добавлена');
                    addRow('nomenclatureTable', nomenclature);
                    await GetParentNomenclature();
                    await GetNomenclatures();
                    await GetListNomenclatures();

                    
                },
                error: function (e) {
                    console.log(e.message);
                }
            })
        }

        var listNom = [];
        // Получение всех Nomenclature
        function GetNomenclatures() {
            //var selectSP = document.getElementById('selectSPNomenclature');
            //var selectExplosion = document.getElementById('selectExplosion');

            //var optsSelect = selectSP.options;
            //while (optsSelect.length > 0) {
            //    optsSelect[optsSelect.length - 1] = null;
            //}
            //var optsSelect1 = selectExplosion.options;
            //while (optsSelect1.length > 0) {
            //    optsSelect1[optsSelect1.length - 1] = null;
            //}

            $.ajax({
                url: '/api/Nomenclature',
                type: 'GET',
                contentType: "application/json",
                success: function (nomenclatures) {

                    $.each(nomenclatures, function (index, nomenclature) {

                        //var ooptionSP = document.createElement('option');
                        //ooptionSP.value = nomenclature.id;
                        //ooptionSP.innerText = nomenclature.name
                        //selectSP.appendChild(ooptionSP);

                        //var ooptionExplosion = document.createElement('option');
                        //ooptionExplosion.value = nomenclature.id;
                        //ooptionExplosion.innerText = nomenclature.name
                        //selectExplosion.appendChild(ooptionExplosion);

                        //resultNOMForSP.set(nomenclature.id, nomenclature.name);
                        //resultPRNTForSP.set(nomenclature.id, nomenclature.parentNomenclatureId);

                        var transactionList = nomenclature;

                        addRow("nomenclatureTable", transactionList);

                    })
                },
                error: function (e) {
                    console.log(e.message);
                }
            });
        }

        function GetListNomenclatures() {
            var selectSP = document.getElementById('selectSPNomenclature');
            var selectExplosion = document.getElementById('selectExplosion');

            var optsSelect = selectSP.options;
            while (optsSelect.length > 0) {
                optsSelect[optsSelect.length - 1] = null;
            }
            var optsSelect1 = selectExplosion.options;
            while (optsSelect1.length > 0) {
                optsSelect1[optsSelect1.length - 1] = null;
            }

            $.ajax({
                url: '/api/Nomenclature',
                type: 'GET',
                contentType: "application/json",
                success: function (nomenclatures) {

                    $.each(nomenclatures, function (index, nomenclature) {

                        var ooptionSP = document.createElement('option');
                        ooptionSP.value = nomenclature.id;
                        ooptionSP.innerText = nomenclature.name
                        selectSP.appendChild(ooptionSP);

                        var ooptionExplosion = document.createElement('option');
                        ooptionExplosion.value = nomenclature.id;
                        ooptionExplosion.innerText = nomenclature.name
                        selectExplosion.appendChild(ooptionExplosion);

                        resultNOMForSP.set(nomenclature.id, nomenclature.name);
                        resultPRNTForSP.set(nomenclature.id, nomenclature.parentNomenclatureId);


                        listNom.push(nomenclature);
                    })
                },
                error: function (e) {
                    console.log(e.message);
                }
            });
            return listNom;
        }

        async function GetParentNomenclatureName(id) {
            var name;
            var urlstr = '/api/Nomenclature/' + id;
            await $.ajax({
                url: urlstr,
                type: 'GET',
                contentType: "application/json",
                success: function (nomenclature) {
                    name = nomenclature.name;
                },
                error: function (e) {
                    console.log(e.message);
                }
            });
            return name;
        }

        async function GetReceiptTypeName(id) {
            var name;
            var urlstr = '/api/ReceiptType/' + id;
            await $.ajax({
                url: urlstr,
                type: 'GET',
                contentType: "application/json",
                success: function (receiptType) {
                    name = receiptType.name;
                },
                error: function (e) {
                    console.log(e.message);
                }
            });
            return name;
        }

        async function GetNomenclatureTypeName(id) {
            var name;
            var urlstr = '/api/NomenclatureType/' + id;
            await $.ajax({
                url: urlstr,
                type: 'GET',
                contentType: "application/json",
                success: function (nomenclatureType) {
                    name = nomenclatureType.name;
                },
                error: function (e) {
                    console.log(e.message);
                }
            });
            return name;
        }

        async function addRow(tableID, data) {

            var table = document.getElementById(tableID);

            var rowCount = table.rows.length;
            var row = table.insertRow(rowCount);

            var nomenclatureName = data.name;

            var parentNomenclatureId = data.parentNomenclatureId;
            var parentNomenclatureName;
            if (parentNomenclatureId == null) {
                parentNomenclatureName = '-';
            }
            else {
                parentNomenclatureName = await GetParentNomenclatureName(parentNomenclatureId);
            }
            var receiptTypeName = await GetReceiptTypeName(data.receiptTypeId);
            var nomenclatureTypeName = await GetNomenclatureTypeName(data.nomenclatureTypeId);

            var cell1 = row.insertCell(0);
            cell1.innerText = data.code;

            var cell2 = row.insertCell(1);
            cell2.innerText = nomenclatureName;

            var cell3 = row.insertCell(2);
            cell3.innerText = receiptTypeName;

            var cell4 = row.insertCell(3);
            cell4.innerText = nomenclatureTypeName;

            var cell5 = row.insertCell(4);
            cell5.innerText = parentNomenclatureName;

            var cell6 = row.insertCell(5);
            //var el = document.createElement('label');
            //cell4.innerHTML = '<input type="checkbox" class="cbx" value="' + data.id + '" id="checkbox' + data.id + '" style="display: none;"><label for="checkbox' + data.id + '" class="check"><svg width="18px" height="18px" viewBox="0 0 18 18"><path d="M1,9 L1,3.5 C1,2 2,1 3.5,1 L14.5,1 C16,1 17,2 17,3.5 L17,14.5 C17,16 16,17 14.5,17 L3.5,17 C2,17 1,16 1,14.5 L1,9 Z"></path><polyline points="1 9 7 14 15 4"></polyline></svg></label>';
            //el.innerHTML = '<input type="checkbox" id="checkbox" value="' + data.id + '" id="cbx" style="display: block;">';
            cell6.innerHTML = '<input type="checkbox" value="' + data.id + '" id="checkbox' + data.id + '"/><label for="checkbox' + data.id + '"></label>';
            //cell4.appendChild(el);
        }
        GetParentNomenclature();
        GetReceiptType();
        GetNomenclatureType();
        GetNomenclatures();
        GetListNomenclatures();






        var overlay = document.getElementById('overlay'),
            mOpen = document.querySelectorAll('[data-modal]'),
            mClose = document.querySelectorAll('[data-close]'),
            outer = document.querySelector('.modal-outer'),
            modals = document.querySelectorAll('.modal-outer > div'),
            duration = 400,
            mStatus = false,
            h = null;



        setTopOuter();

        function setTopOuter() {
            outer.style.top = -outer.offsetHeight + 'px';
        }


        function somebodyShow(modal) {

            mStatus = true;
            overlay.classList.remove('fadeOut');
            overlay.classList.add('fadeIn');
            modal.style.display = 'block';

            var start = new Date().getTime(),
                startTop = outer.getBoundingClientRect().top,
                finalTop = (window.innerHeight - outer.offsetHeight) / 2,
                offset = outer.offsetHeight + finalTop;

            var fn = function () {
                var now = new Date().getTime() - start,
                    currTop = Math.round(startTop + offset * now / duration);

                currTop = (currTop > finalTop) ? finalTop : currTop;
                outer.style.top = currTop + 'px';

                if (currTop < finalTop) {
                    requestAnimationFrame(fn);
                }
            }
            requestAnimationFrame(fn);
            window.addEventListener('resize', setTopOpenOuter);
        }

        function setTopOpenOuter() {
            outer.style.top = (window.innerHeight - outer.offsetHeight) / 2 + 'px';
        }

        (function () {
            if (mOpen.length == 0) return;
            [].forEach.call(mOpen, function (el) {
                el.addEventListener('click', function (e) {
                    var modalId = el.getAttribute('data-modal'),
                        modal = document.getElementById(modalId);
                    somebodyShow(modal);
                });
            });
        }());


        [].forEach.call(mClose, function (el) {
            el.addEventListener('click', modalClose);
        });

        document.addEventListener('keydown', modalClose);


        function modalClose(event) {
            if (mStatus && (!event.keyCode || event.keyCode === 27)) {
                mStatus = false;

                var start = new Date().getTime(),
                    startTop = outer.getBoundingClientRect().top,
                    finalTop = -outer.offsetHeight,
                    offset = outer.offsetHeight + (window.innerHeight - outer.offsetHeight) / 2;

                var fn = function () {
                    var now = new Date().getTime() - start,
                        currTop = Math.round(startTop - offset * now / duration);

                    currTop = (currTop < finalTop) ? finalTop : currTop;
                    outer.style.top = currTop + 'px';

                    if (currTop > finalTop) {
                        requestAnimationFrame(fn);
                    } else {
                        overlay.classList.remove('fadeIn');
                        overlay.classList.add('fadeOut');
                        [].forEach.call(modals, function (modal) {
                            modal.removeAttribute('style');
                        });
                    }
                }
                requestAnimationFrame(fn);
                window.removeEventListener('resize', setTopOpenOuter);
            }
        }



        ; (function () {
            var overlay = document.getElementById('overlay'),
                mOpen = document.querySelectorAll('[data-modal]'),
                mClose = document.querySelectorAll('[data-close]'),
                outer = document.querySelector('.modal-outer'),
                modals = document.querySelectorAll('.modal-outer > div'),
                duration = 400,
                mStatus = false,
                h = null;

            if (mOpen.length == 0) return;

            setTopOuter();

            function setTopOuter() {
                outer.style.top = -outer.offsetHeight + 'px';
            }

            [].forEach.call(mOpen, function (el) {
                el.addEventListener('click', function (e) {
                    var modalId = el.getAttribute('data-modal'),
                        modal = document.getElementById(modalId);
                    modalShow(modal);
                });
            });

            [].forEach.call(mClose, function (el) {
                el.addEventListener('click', modalClose);
            });

            document.addEventListener('keydown', modalClose);

            function modalShow(modal) {
                mStatus = true;
                overlay.classList.remove('fadeOut');
                overlay.classList.add('fadeIn');
                modal.style.display = 'block';

                var start = new Date().getTime(),
                    startTop = outer.getBoundingClientRect().top,
                    finalTop = (window.innerHeight - outer.offsetHeight) / 2,
                    offset = outer.offsetHeight + finalTop;

                var fn = function () {
                    var now = new Date().getTime() - start,
                        currTop = Math.round(startTop + offset * now / duration);

                    currTop = (currTop > finalTop) ? finalTop : currTop;
                    outer.style.top = currTop + 'px';

                    if (currTop < finalTop) {
                        requestAnimationFrame(fn);
                    }
                }
                requestAnimationFrame(fn);
                window.addEventListener('resize', setTopOpenOuter);
            }

            function modalClose(event) {
                if (mStatus && (!event.keyCode || event.keyCode === 27)) {
                    mStatus = false;

                    var start = new Date().getTime(),
                        startTop = outer.getBoundingClientRect().top,
                        finalTop = -outer.offsetHeight,
                        offset = outer.offsetHeight + (window.innerHeight - outer.offsetHeight) / 2;

                    var fn = function () {
                        var now = new Date().getTime() - start,
                            currTop = Math.round(startTop - offset * now / duration);

                        currTop = (currTop < finalTop) ? finalTop : currTop;
                        outer.style.top = currTop + 'px';

                        if (currTop > finalTop) {
                            requestAnimationFrame(fn);
                        } else {
                            overlay.classList.remove('fadeIn');
                            overlay.classList.add('fadeOut');
                            [].forEach.call(modals, function (modal) {
                                modal.removeAttribute('style');
                            });
                        }
                    }
                    requestAnimationFrame(fn);
                    window.removeEventListener('resize', setTopOpenOuter);
                }
            }

            function setTopOpenOuter() {
                outer.style.top = (window.innerHeight - outer.offsetHeight) / 2 + 'px';
            }
        })();

    </script>

    <script>var typeAnimate = 'slide';</script>
    @*<script>
            ; (function () {
                var overlay = document.getElementById('overlay'),
                    mOpen = document.querySelectorAll('[data-modal]'),
                    mClose = document.querySelectorAll('[data-close]'),
                    outer = document.querySelector('.modal-outer'),
                    modals = document.querySelectorAll('.modal-outer > div'),
                    duration = 400,
                    mStatus = false,
                    h = null;

                if (mOpen.length == 0) return;

                setTopOuter();

                function setTopOuter() {
                    outer.style.top = -outer.offsetHeight + 'px';
                }

                [].forEach.call(mOpen, function (el) {
                    el.addEventListener('click', function (e) {
                        var modalId = el.getAttribute('data-modal'),
                            modal = document.getElementById(modalId);
                        modalShow(modal);
                    });
                });

                [].forEach.call(mClose, function (el) {
                    el.addEventListener('click', modalClose);
                });

                document.addEventListener('keydown', modalClose);

                function modalShow(modal) {
                    mStatus = true;
                    overlay.classList.remove('fadeOut');
                    overlay.classList.add('fadeIn');
                    modal.style.display = 'block';

                    var start = new Date().getTime(),
                        startTop = outer.getBoundingClientRect().top,
                        finalTop = (window.innerHeight - outer.offsetHeight) / 2,
                        offset = outer.offsetHeight + finalTop;

                    var fn = function () {
                        var now = new Date().getTime() - start,
                            currTop = Math.round(startTop + offset * now / duration);

                        currTop = (currTop > finalTop) ? finalTop : currTop;
                        outer.style.top = currTop + 'px';

                        if (currTop < finalTop) {
                            requestAnimationFrame(fn);
                        }
                    }
                    requestAnimationFrame(fn);
                    window.addEventListener('resize', setTopOpenOuter);
                }

                function modalClose(event) {
                    if (mStatus && (!event.keyCode || event.keyCode === 27)) {
                        mStatus = false;

                        var start = new Date().getTime(),
                            startTop = outer.getBoundingClientRect().top,
                            finalTop = -outer.offsetHeight,
                            offset = outer.offsetHeight + (window.innerHeight - outer.offsetHeight) / 2;

                        var fn = function () {
                            var now = new Date().getTime() - start,
                                currTop = Math.round(startTop - offset * now / duration);

                            currTop = (currTop < finalTop) ? finalTop : currTop;
                            outer.style.top = currTop + 'px';

                            if (currTop > finalTop) {
                                requestAnimationFrame(fn);
                            } else {
                                overlay.classList.remove('fadeIn');
                                overlay.classList.add('fadeOut');
                                [].forEach.call(modals, function (modal) {
                                    modal.removeAttribute('style');
                                });
                            }
                        }
                        requestAnimationFrame(fn);
                        window.removeEventListener('resize', setTopOpenOuter);
                    }
                }

                function setTopOpenOuter() {
                    outer.style.top = (window.innerHeight - outer.offsetHeight) / 2 + 'px';
                }
            })();

        </script>*@
</body>


</html>
